# -*- coding: utf-8 -*-
"""speaking_clock.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Zq7R1mNQrQhHtVZI7i_ol6Z7g2uEV3aK

## MS Azure Module Assignment

Azure AI Speech Service Integration, Voice Recognition, and Translation
"""

!pip install azure.cognitiveservices.speech
!pip install azure-cognitiveservices-language-textanalytics

"""## Recording Your Voice in English:
Using an audio recording tool, record your voice in English, including an introduction of yourself. The introduction should not exceed two minutes in duration.

Save the recorded audio as a .wav file. Ensure that the file name is unique and meaningful, such as "yourname_intro.wav."

Place the recorded audio file in the same directory as the provided sample file "time.wav."
"""

import os

audio_file = "/content/my_intro_azureproject.wav"

if os.path.exists(audio_file):
    print("File exists")
else:
    print("File does not exist")

"""## Fixation of the audio file:"""

!ffmpeg -i my_intro_azureproject.wav -acodec pcm_s16le -ar 16000 my_intro_azureproject_fixed.wav

"""## Modifying "speaking-clock.py" Code:
Open the "speaking-clock.py" file in a text editor or IDE.

Utilize the Azure AI Speech service knowledge gained in recent labs to locate the code section responsible for transcribing the "time.wav" file.

Modify this section to transcribe your recorded audio file ("yourname_intro.wav") instead.

Ensure that the transcription results are stored separately for English.
"""

import os
import azure.cognitiveservices.speech as speechsdk

# Set your Azure subscription key and service region
subscription_key = "900b06ec4b554b6e89ca637073b0624f"
region = "eastus"

# Define the path to your audio file
audio_file_path = "/content/my_intro_azureproject_fixed.wav"

# Create a directory to store transcription results
if not os.path.exists("transcription_results"):
    os.makedirs("transcription_results")

def transcribe_audio(audio_file, language):
    # Set up the Azure Speech service client
    speech_config = speechsdk.SpeechConfig(subscription=subscription_key, region=region)
    audio_config = speechsdk.audio.AudioConfig(filename=audio_file)

    # Initialize the speech recognizer
    speech_recognizer = speechsdk.SpeechRecognizer(speech_config=speech_config, audio_config=audio_config)

    # Perform speech recognition
    result = speech_recognizer.recognize_once()

    if result.reason == speechsdk.ResultReason.RecognizedSpeech:
        # Transcription successful
        print(f"Recognized ({language}): {result.text}")

        # Store the transcription result separately for English
        if language.lower() == "en":
            output_file = os.path.join("transcription_results", "english_transcription.txt")
            with open(output_file, "w") as english_file:
                english_file.write(result.text)
    elif result.reason == speechsdk.ResultReason.NoMatch:
        print("No speech could be recognized")
    elif result.reason == speechsdk.ResultReason.Canceled:
        cancellation_details = result.cancellation_details.reason
        print(f"Speech Recognition canceled: {cancellation_details}")

# Transcribe the audio for English
transcribe_audio(audio_file_path, language="en")

"""## Creating a Function to Call Your Name:
Use the Azure AI Speech service knowledge to create a new Python function in the "speaking-clock.py" file.

Name this function after your name, for example, "YourNameCall."

Inside the function, use the Azure AI Speech service to recognize and read your name from the recorded audio.
"""

import azure.cognitiveservices.speech as speechsdk

def YourNameCall(audio_file, name):
    # Set your Azure subscription key and service region
    subscription_key = "900b06ec4b554b6e89ca637073b0624f"
    region = "eastus"

    # Set up the Azure Speech service client
    speech_config = speechsdk.SpeechConfig(subscription=subscription_key, region=region)
    audio_config = speechsdk.audio.AudioConfig(filename=audio_file)

    # Initialize the speech recognizer
    speech_recognizer = speechsdk.SpeechRecognizer(speech_config=speech_config, audio_config=audio_config)

    # Perform speech recognition
    result = speech_recognizer.recognize_once()

    if result.reason == speechsdk.ResultReason.RecognizedSpeech:
        # Check if your name is recognized in the transcription
        if name.lower() in result.text.lower():
            # Your name was recognized
            print(f"Hello, {name}!")
        else:
            # Your name was not recognized
            print("Sorry, I didn't hear your name.")
    elif result.reason == speechsdk.ResultReason.NoMatch:
        print("No speech could be recognized")
    elif result.reason == speechsdk.ResultReason.Canceled:
        cancellation_details = result.cancellation_details.reason
        print(f"Speech Recognition canceled: {cancellation_details}")

if __name__ == "__main__":
    audio_file = "/content/my_intro_azureproject_fixed.wav"  # Replace with the path to your audio file
    your_name = "AliMuhammad"  # Replace with your name
    YourNameCall(audio_file, your_name)

"""## Translation Using Azure Translator Service:
Leverage the Translator service knowledge from previous labs (Translator Service) to translate the English transcription into Urdu.

Implement this translation within the "speaking-clock.py" file.

Store the translated audio separately.
"""

import os
import azure.cognitiveservices.speech as speechsdk
from azure.cognitiveservices.language.textanalytics import TextAnalyticsClient
from msrest.authentication import CognitiveServicesCredentials

def translate_to_urdu(text, subscription_key, region):
    # Set up the Azure Translator service client
    credentials = CognitiveServicesCredentials(subscription_key)
    text_analytics_client = TextAnalyticsClient(endpoint=f"https://{region}.api.cognitive.microsofttranslator.com", credentials=credentials)

    # Translate text from English to Urdu
    translation_response = text_analytics_client.translators(text, source_language="en", target_language="ur")
    urdu_translation = translation_response[0].translations[0].text

    return urdu_translation

def transcribe_and_translate(audio_file, name, translator_subscription_key, translator_region):
    # Set your Azure Speech service subscription key and region
    subscription_key = "900b06ec4b554b6e89ca637073b0624f"
    region = "eastus"

    # Set up the Azure Speech service client
    speech_config = speechsdk.SpeechConfig(subscription=subscription_key, region=region)
    audio_config = speechsdk.audio.AudioConfig(filename=audio_file)

    # Initialize the speech recognizer
    speech_recognizer = speechsdk.SpeechRecognizer(speech_config=speech_config, audio_config=audio_config)

    # Perform speech recognition
    result = speech_recognizer.recognize_once()

    if result.reason == speechsdk.ResultReason.RecognizedSpeech:
        # Check if your name is recognized in the transcription
        if name.lower() in result.text.lower():
            # Greet in English
            print(f"Hello, {name}!")

            # Translate the transcription to Urdu
            urdu_translation = translate_to_urdu(result.text, translator_subscription_key, translator_region)

            # Print the Urdu translation
            print(f"Urdu Translation: {urdu_translation}")
        else:
            # Your name was not recognized
            print("Sorry, I didn't hear your name.")
    elif result.reason == speechsdk.ResultReason.NoMatch:
        print("No speech could be recognized")
    elif result.reason == speechsdk.ResultReason.Canceled:
        cancellation_details = result.cancellation_details.reason
        print(f"Speech Recognition canceled: {cancellation_details}")

if __name__ == "__main__":
    audio_file_path = "/content/my_intro_azureproject_fixed.wav"  # Replace with the path to your audio file
    your_name = "AliMuhammad"  # Replace with your name
    translator_subscription_key = "900b06ec4b554b6e89ca637073b0624f"  # Replace with your Translator service key
    translator_region = "eastus"  # Replace with your Translator service region

    transcribe_and_translate(audio_file_path, your_name, translator_subscription_key, translator_region)

"""## Zip all submissions into one zip file, named "YourName_LMSID.zip"."""

!cd E:\DSAI-NUST Course\Azure Project
!zip AliMuhammad_LMSID.zip speaking-clock.py my_intro_azureproject_fixed.wav translation.wav GitHub_Link.txt

"""Github Link: https://github.com/aleebaqi"""